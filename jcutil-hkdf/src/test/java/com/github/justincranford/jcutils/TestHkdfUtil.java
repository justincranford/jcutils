package com.github.justincranford.jcutils;

import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.util.Arrays;
import java.util.Collection;

import javax.crypto.Mac;
import javax.crypto.ShortBufferException;
import javax.xml.bind.DatatypeConverter;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

/**
 * Mandatory tests are provided using test vectors from RFC 5869.
 * Additional tests are provided for code coverage of failure use cases.
 * Together they demonstrate how the APIs are expected to work or report errors.
 */
@RunWith(Parameterized.class)
@SuppressWarnings({"static-method","hiding"})
public class TestHkdfUtil {
	private String provider;
	private int    warmups;
	private int    samples;

	public TestHkdfUtil(final String provider, final int warmups, final int samples) {
		this.provider = provider;
		this.warmups  = warmups;
		this.samples  = samples;
	}

	@Parameters(name="{index}: {0}")	// Add parameter {0} to JUnit result label. EX: "[0: SunJCE]" and "[1: BC]"
	public static Collection<Object[]> data() {	// EX: Collection.get(0)={"SunJCE",100,10000} & Collection.get(1)={"BC",100,10000}
		final int warmups = 100;
		final int samples = 1000;
		return Arrays.asList(
			new Object[][] {
				{"SunJCE",  Integer.valueOf(warmups), Integer.valueOf(samples)},
				{"BC",      Integer.valueOf(warmups), Integer.valueOf(samples)}
			}
		);
	}

	@BeforeClass
	public static void beforeClass() {
		Security.insertProviderAt(new org.bouncycastle.jce.provider.BouncyCastleProvider(), 1);
		Timer.setAutoLogInterval(0);
	}

	@AfterClass
	public static void afterClass() {
		Security.removeProvider("BC");
		Timer.logAllOrderedByName(false);
		Timer.reset();
	}

	@Test
	public void testPrivateConstructor() throws Exception {
		ValidationUtil.assertPrivateConstructorNoParameters(HkdfUtil.class, true);
	}

	/**
     * https://tools.ietf.org/html/rfc5869
     * 
     * A.1.  Test Case 1
     *	Basic test case with SHA-256
     * 
     *	Hash = SHA-256
     *	IKM  = 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b (22 octets)
     *	salt = 0x000102030405060708090a0b0c (13 octets)
     *	info = 0xf0f1f2f3f4f5f6f7f8f9 (10 octets)
     *	L    = 42
     * 
     *	PRK  = 0x077709362c2e32df0ddc3f0dc47bba63
     *	       90b6c73bb50f9c3122ec844ad7c2b3e5 (32 octets)
     *	OKM  = 0x3cb25f25faacd57a90434f64d0362f2a
     *	       2d2d0a90cf1a5a4c5db02d56ecc4c5bf
     *	       34007208d5b887185865 (42 octets)
     * @throws Exception
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA1() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b");
		final byte[] salt        = DatatypeConverter.parseHexBinary("000102030405060708090a0b0c");
		final byte[] info        = DatatypeConverter.parseHexBinary("f0f1f2f3f4f5f6f7f8f9");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2b3e5");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	/**
     * A.2.  Test Case 2
     * 
     *	Test with SHA-256 and longer inputs/outputs
     * 
     *	Hash = SHA-256
     *	IKM  = 0x000102030405060708090a0b0c0d0e0f
     *	       101112131415161718191a1b1c1d1e1f
     *	       202122232425262728292a2b2c2d2e2f
     *	       303132333435363738393a3b3c3d3e3f
     *	       404142434445464748494a4b4c4d4e4f (80 octets)
     *	salt = 0x606162636465666768696a6b6c6d6e6f
     *	       707172737475767778797a7b7c7d7e7f
     *	       808182838485868788898a8b8c8d8e8f
     *	       909192939495969798999a9b9c9d9e9f
     *	       a0a1a2a3a4a5a6a7a8a9aaabacadaeaf (80 octets)
     *	info = 0xb0b1b2b3b4b5b6b7b8b9babbbcbdbebf
     *	       c0c1c2c3c4c5c6c7c8c9cacbcccdcecf
     *	       d0d1d2d3d4d5d6d7d8d9dadbdcdddedf
     *	       e0e1e2e3e4e5e6e7e8e9eaebecedeeef
     *	       f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff (80 octets)
     *	L    = 82
     * 
     *	PRK  = 0x06a6b88c5853361a06104c9ceb35b45c
     *	       ef760014904671014a193f40c15fc244 (32 octets)
     *	OKM  = 0xb11e398dc80327a1c8e7f78c596a4934
     *	       4f012eda2d4efad8a050cc4c19afa97c
     *	       59045a99cac7827271cb41c65e590e09
     *	       da3275600c2f09b8367793a9aca3db71
     *	       cc30c58179ec3e87c14c01d5c1f3434f
     *	       1d87 (82 octets)
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA2() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f");
		final byte[] salt        = DatatypeConverter.parseHexBinary("606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf");
		final byte[] info        = DatatypeConverter.parseHexBinary("b0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff");
		final int    length      = 82;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("06a6b88c5853361a06104c9ceb35b45cef760014904671014a193f40c15fc244");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("b11e398dc80327a1c8e7f78c596a49344f012eda2d4efad8a050cc4c19afa97c59045a99cac7827271cb41c65e590e09da3275600c2f09b8367793a9aca3db71cc30c58179ec3e87c14c01d5c1f3434f1d87");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	/**
     * A.3.  Test Case 3
     * 
     *	Test with SHA-256 and zero-length salt/info
     * 
     *	Hash = SHA-256
     *	IKM  = 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b (22 octets)
     *	salt = (0 octets)
     *	info = (0 octets)
     *	L    = 42
     * 
     *	PRK  = 0x19ef24a32c717b167f33a91d6f648bdf
     *	       96596776afdb6377ac434c1c293ccb04 (32 octets)
     *	OKM  = 0x8da4e775a563c18f715f802a063c5a31
     *	       b8a11f5c5ee1879ec3454e5f3c738d2d
     *	       9d201395faa4b61a96c8 (42 octets)
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA3() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b");
		final byte[] salt        = DatatypeConverter.parseHexBinary("");
		final byte[] info        = DatatypeConverter.parseHexBinary("");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("19ef24a32c717b167f33a91d6f648bdf96596776afdb6377ac434c1c293ccb04");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d9d201395faa4b61a96c8");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	/**
     * A.4.  Test Case 4
     * 
     *	Basic test case with SHA-1
     * 
     *	Hash = SHA-1
     *	IKM  = 0x0b0b0b0b0b0b0b0b0b0b0b (11 octets)
     *	salt = 0x000102030405060708090a0b0c (13 octets)
     *	info = 0xf0f1f2f3f4f5f6f7f8f9 (10 octets)
     *	L    = 42
     * 
     *	PRK  = 0x9b6c18c432a7bf8f0e71c8eb88f4b30baa2ba243 (20 octets)
     *	OKM  = 0x085a01ea1b10f36933068b56efa5ad81
     *	       a4f14b822f5b091568a9cdd4f155fda2
     *	       c22e422478d305f3f896
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA4() throws Exception {
		final String hash        = "HmacSHA1";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("0b0b0b0b0b0b0b0b0b0b0b");
		final byte[] salt        = DatatypeConverter.parseHexBinary("000102030405060708090a0b0c");
		final byte[] info        = DatatypeConverter.parseHexBinary("f0f1f2f3f4f5f6f7f8f9");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("9b6c18c432a7bf8f0e71c8eb88f4b30baa2ba243");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("085a01ea1b10f36933068b56efa5ad81a4f14b822f5b091568a9cdd4f155fda2c22e422478d305f3f896");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	/**
     * A.5.  Test Case 5
     * 
     *	Test with SHA-1 and longer inputs/outputs
     * 
     *	Hash = SHA-1
     *	IKM  = 0x000102030405060708090a0b0c0d0e0f
     *	       101112131415161718191a1b1c1d1e1f
     *	       202122232425262728292a2b2c2d2e2f
     *	       303132333435363738393a3b3c3d3e3f
     *	       404142434445464748494a4b4c4d4e4f (80 octets)
     *	salt = 0x606162636465666768696a6b6c6d6e6f
     *	       707172737475767778797a7b7c7d7e7f
     *	       808182838485868788898a8b8c8d8e8f
     *	       909192939495969798999a9b9c9d9e9f
     *	       a0a1a2a3a4a5a6a7a8a9aaabacadaeaf (80 octets)
     *	info = 0xb0b1b2b3b4b5b6b7b8b9babbbcbdbebf
     *	       c0c1c2c3c4c5c6c7c8c9cacbcccdcecf
     *	       d0d1d2d3d4d5d6d7d8d9dadbdcdddedf
     *	       e0e1e2e3e4e5e6e7e8e9eaebecedeeef
     *	       f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff (80 octets)
     *	L    = 82
     * 
     *	PRK  = 0x8adae09a2a307059478d309b26c4115a224cfaf6 (20 octets)
     *	OKM  = 0x0bd770a74d1160f7c9f12cd5912a06eb
     *	       ff6adcae899d92191fe4305673ba2ffe
     *	       8fa3f1a4e5ad79f3f334b3b202b2173c
     *	       486ea37ce3d397ed034c7f9dfeb15c5e
     *	       927336d0441f4c4300e2cff0d0900b52
     *	       d3b4 (82 octets)
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA5() throws Exception {
		final String hash        = "HmacSHA1";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f");
		final byte[] salt        = DatatypeConverter.parseHexBinary("606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf");
		final byte[] info        = DatatypeConverter.parseHexBinary("b0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff");
		final int    length      = 82;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("8adae09a2a307059478d309b26c4115a224cfaf6");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("0bd770a74d1160f7c9f12cd5912a06ebff6adcae899d92191fe4305673ba2ffe8fa3f1a4e5ad79f3f334b3b202b2173c486ea37ce3d397ed034c7f9dfeb15c5e927336d0441f4c4300e2cff0d0900b52d3b4");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	/**
     * A.6.  Test Case 6
     * 
     *	Test with SHA-1 and zero-length salt/info
     * 
     *	Hash = SHA-1
     *	IKM  = 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b (22 octets)
     *	salt = (0 octets)
     *	info = (0 octets)
     *	L    = 42
     * 
     *	PRK  = 0xda8c8a73c7fa77288ec6f5e7c297786aa0d32d01 (20 octets)
     *	OKM  = 0x0ac1af7002b3d761d1e55298da9d0506
     *	       b9ae52057220a306e07b6b87e8df21d0
     *	       ea00033de03984d34918 (42 octets)
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA6() throws Exception {
		final String hash        = "HmacSHA1";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b");
		final byte[] salt        = DatatypeConverter.parseHexBinary("");
		final byte[] info        = DatatypeConverter.parseHexBinary("");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("da8c8a73c7fa77288ec6f5e7c297786aa0d32d01");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("0ac1af7002b3d761d1e55298da9d0506b9ae52057220a306e07b6b87e8df21d0ea00033de03984d34918");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	/**
     * A.7.  Test Case 7
     * 
     *	Test with SHA-1, salt not provided (defaults to HashLen zero octets),
     *	zero-length info
     * 
     *	Hash = SHA-1
     *	IKM  = 0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c (22 octets)
     *	salt = not provided (defaults to HashLen zero octets)
     *	info = (0 octets)
     *	L    = 42
     * 
     *	PRK  = 0x2adccada18779e7c2077ad2eb19d3f3e731385dd (20 octets)
     *	OKM  = 0x2c91117204d745f3500d636a62f64f0a
     *	       b3bae548aa53d423b0d1f27ebba6f5e5
     *	       673a081d70cce7acfc48 (42 octets)
     */
	@Test
	public void testHkdfAppendixATestVectorsTestCaseA7() throws Exception {
		final String hash        = "HmacSHA1";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c");
		final byte[] salt        = DatatypeConverter.parseHexBinary("");
		final byte[] info        = DatatypeConverter.parseHexBinary("");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("2adccada18779e7c2077ad2eb19d3f3e731385dd");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("2c91117204d745f3500d636a62f64f0ab3bae548aa53d423b0d1f27ebba6f5e5673a081d70cce7acfc48");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfNullProvider() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(null, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=NoSuchProviderException.class)
	public void testHkdfUnknownProvider() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper("UnknownProvider", hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=NullPointerException.class)
	public void testHkdfNullAlgorithm() throws Exception {
		final String hash        = null;
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=NoSuchAlgorithmException.class)
	public void testHkdfEmptyAlgorithm() throws Exception {
		final String hash        = "";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfNullIkm() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = null;
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfEmptyIkm() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test
	public void testHkdfNullSalt() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = null;
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("6620B31F2924B8C01547745F41825D322336F83EBB13D723678789D554D8A3EF");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("06BACBA013A57E9DD186931647DC90E7F0C8CA4D9602BDE594014CE11ACAEC7421640591F3DFEE3A67E8");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test
	public void testHkdfEmptySalt() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("6620B31F2924B8C01547745F41825D322336F83EBB13D723678789D554D8A3EF");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("06BACBA013A57E9DD186931647DC90E7F0C8CA4D9602BDE594014CE11ACAEC7421640591F3DFEE3A67E8");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test
	public void testHkdfNullInfo() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = null;
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("6620B31F2924B8C01547745F41825D322336F83EBB13D723678789D554D8A3EF");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("CA0D09522019F6622A278DB5E2A2131A52A626A7478B2551BDE9A42B090E02FAD05E22BA6290969E0299");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test
	public void testHkdfEmptyInfo() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("6620B31F2924B8C01547745F41825D322336F83EBB13D723678789D554D8A3EF");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("CA0D09522019F6622A278DB5E2A2131A52A626A7478B2551BDE9A42B090E02FAD05E22BA6290969E0299");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfNegativeLength() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = -1;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfZeroLength() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 0;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test
	public void testHkdfMaxLength() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = Mac.getInstance(hash, this.provider).getMacLength() * 255;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("6620B31F2924B8C01547745F41825D322336F83EBB13D723678789D554D8A3EF");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfMaxLengthPlusOne() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = Mac.getInstance(hash, this.provider).getMacLength() * 255 + 1;
		final byte[] expectedPrk = null;
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testHkdfEmptyPrk() throws Exception {
		final String hash        = "HmacSHA256";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("00");
		final byte[] salt        = DatatypeConverter.parseHexBinary("00");
		final byte[] info        = DatatypeConverter.parseHexBinary("00");
		final int    length      = 42;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("");
		final byte[] expectedOkm = null;
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	private void testHkdfHelper(final String provider, final String hash, final byte[] ikm, final byte[] salt, final byte[] info, final int length, final byte[] expectedPrk, final byte[] expectedOkm) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, ShortBufferException, IllegalStateException {
		final byte[] actualExtractAndExpandOkm = HkdfUtil.hkdfExtractAndExpand(provider, hash, length, ikm, salt, info);
		final byte[] actualExtractOnlyPrk      = HkdfUtil.hkdfExtract(provider, hash, ikm, salt);
		final byte[] actualExpandOnlyOkm       = HkdfUtil.hkdfExpand(provider, hash, length, info, expectedPrk);

		final int expectedMacLength = Mac.getInstance(hash, provider).getMacLength();
		Assert.assertNotNull(actualExtractOnlyPrk);
		Assert.assertEquals(expectedMacLength, actualExtractOnlyPrk.length);	// Example: SHA-256 output is 256 bits or 32 bytes
		Assert.assertTrue("Expected Extract Only PRK: " + DatatypeConverter.printHexBinary(expectedPrk) + ", Actual: " + DatatypeConverter.printHexBinary(actualExtractOnlyPrk), MessageDigest.isEqual(expectedPrk, actualExtractOnlyPrk));	// Constant time byte array compare prevents length time attack

		Assert.assertNotNull(actualExpandOnlyOkm);
		Assert.assertEquals(length, actualExpandOnlyOkm.length);
		Assert.assertTrue("Expected Expand Only OKM: " + DatatypeConverter.printHexBinary(expectedOkm) + ", Actual: " + DatatypeConverter.printHexBinary(actualExpandOnlyOkm), MessageDigest.isEqual(expectedOkm, actualExpandOnlyOkm));	// Constant time byte array compare prevents length time attack

		Assert.assertNotNull(actualExtractAndExpandOkm);
		Assert.assertEquals(length, actualExtractAndExpandOkm.length);
		Assert.assertTrue("Expected Extract-And-Expand OKM: " + DatatypeConverter.printHexBinary(expectedOkm) + ", Actual: " + DatatypeConverter.printHexBinary(actualExtractAndExpandOkm), MessageDigest.isEqual(expectedOkm, actualExtractAndExpandOkm));	// Constant time byte array compare prevents length time attack
	}

//	private void testHkdfHelperExpandOnlyDiffLengthPrkHash(final String provider, final String hash, final byte[] ikm, final byte[] salt, final byte[] info, final int length, final byte[] expectedPrk, final byte[] expectedOkm) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, ShortBufferException, IllegalStateException {
//		final byte[] actualExpandOnlyOkm = HkdfUtil.hkdfExpand(provider, hash, length, info, expectedPrk);
//
//		Assert.assertNotNull(actualExtractOnlyPrk);
//		Assert.assertNotEquals(expectedMacLength, actualExtractOnlyPrk.length);	// Example: SHA-256 output is 256 bits or 32 bytes
//		Assert.assertTrue("Expected Extract Only PRK: " + DatatypeConverter.printHexBinary(expectedPrk) + ", Actual: " + DatatypeConverter.printHexBinary(actualExtractOnlyPrk), MessageDigest.isEqual(expectedPrk, actualExtractOnlyPrk));	// Constant time byte array compare prevents length time attack
//	}

	@Test
	public void testHkdfPerformance() throws Exception {
		final String hash        = "HmacSHA1";
		final byte[] ikm         = DatatypeConverter.parseHexBinary("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f");
		final byte[] salt        = DatatypeConverter.parseHexBinary("606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf");
		final byte[] info        = DatatypeConverter.parseHexBinary("b0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff");
		final int    length      = 82;
		final byte[] expectedPrk = DatatypeConverter.parseHexBinary("8adae09a2a307059478d309b26c4115a224cfaf6");
		final byte[] expectedOkm = DatatypeConverter.parseHexBinary("0bd770a74d1160f7c9f12cd5912a06ebff6adcae899d92191fe4305673ba2ffe8fa3f1a4e5ad79f3f334b3b202b2173c486ea37ce3d397ed034c7f9dfeb15c5e927336d0441f4c4300e2cff0d0900b52d3b4");
		this.testHkdfHelper(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);

		this.testHkdfPerformanceExtractAndExpand(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
		this.testHkdfPerformanceExtract			(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
		this.testHkdfPerformanceExpand			(this.provider, hash, ikm, salt, info, length, expectedPrk, expectedOkm);
	}

	@SuppressWarnings("unused")
	private void testHkdfPerformanceExtractAndExpand(final String provider, final String hash, final byte[] ikm, final byte[] salt, final byte[] info, final int length, final byte[] expectedPrk, final byte[] expectedOkm) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, ShortBufferException, IllegalStateException {
		for (int i=0; i<this.warmups; i++) {	// performance warm ups
			HkdfUtil.hkdfExtractAndExpand(provider, hash, length, ikm, salt, info);
		}
		try (Timer x = new Timer("hkdfExtractAndExpand-" + this.provider)) {	// performance samples
			for (int i=0; i<this.samples; i++) {
				HkdfUtil.hkdfExtractAndExpand(provider, hash, length, ikm, salt, info);
			}
		}
	}

	@SuppressWarnings("unused")
	private void testHkdfPerformanceExtract(final String provider, final String hash, final byte[] ikm, final byte[] salt, final byte[] info, final int length, final byte[] expectedPrk, final byte[] expectedOkm) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException {
		for (int i=0; i<this.warmups; i++) {	// performance warm ups
			HkdfUtil.hkdfExtract(provider, hash, ikm, salt);
		}

		try (Timer x = new Timer("hkdfExtract-" + this.provider)) {	// performance samples
			for (int i=0; i<this.samples; i++) {
				HkdfUtil.hkdfExtract(provider, hash, ikm, salt);
			}
		}
	}

	@SuppressWarnings("unused")
	private void testHkdfPerformanceExpand(final String provider, final String hash, final byte[] ikm, final byte[] salt, final byte[] info, final int length, final byte[] expectedPrk, final byte[] expectedOkm) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, ShortBufferException, IllegalStateException {
		for (int i=0; i<this.warmups; i++) {	// performance warm ups
			HkdfUtil.hkdfExpand(provider, hash, length, info, expectedPrk);
		}
		try (Timer x = new Timer("hkdfExpand-" + this.provider)) {	// performance samples
			for (int i=0; i<this.samples; i++) {
				HkdfUtil.hkdfExpand(provider, hash, length, info, expectedPrk);
			}
		}
	}
}