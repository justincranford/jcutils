package com.github.justincranford.jcutils;

import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;

import javax.crypto.Mac;
import javax.xml.bind.DatatypeConverter;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

/**
 * Mandatory tests are provided using test vectors from RFC 6070 for RFC 2898.
 * Additional tests are provided for code coverage of failure use cases.
 * Together they demonstrate how the APIs are expected to work or report errors.
 * 
 * @author cranfoj
 */
@RunWith(Parameterized.class)
//@RunWith(JUnitRunnerParallelized.class)
@SuppressWarnings({"static-method","hiding"})
public class TestPbkdf2Util {
	private static final String[] perfTestMmacAlgorithms = new String[]{"HmacSHA1", "HmacSHA224", "HmacSHA256", "HmacSHA384", "HmacSHA512"};

	private String provider;
	private int    warmups;
	private int    samples;

	public TestPbkdf2Util(final String provider, final int warmups, final int samples) {
		this.provider = provider;
		this.warmups  = warmups;
		this.samples  = samples;
	}

	@Parameters(name="{index}: {0}")	// Add parameter {0} to JUnit result label. EX: "[0: SunJCE]" and "[1: BC]"
	public static Collection<Object[]> data() {	// EX: Collection.get(0)={"SunJCE",100,10000} & Collection.get(1)={"BC",100,10000}
		final int warmups = 50;
		final int samples = 500;
		return Arrays.asList(
			new Object[][] {
				{"SunJCE",  Integer.valueOf(warmups), Integer.valueOf(samples)},
				{"BC",      Integer.valueOf(warmups), Integer.valueOf(samples)}
			}
		);
	}

	@BeforeClass
	public static void beforeClass() {
		Security.insertProviderAt(new BouncyCastleProvider(), 1);
		Timer.setLogAverageTimeUnit(TimeUnit.MILLISECONDS);
		Timer.setLogTotalTimeUnit(TimeUnit.MILLISECONDS);
		Timer.setAutoLogInterval(0);
	}

	@AfterClass
	public static void afterClass() {
		Security.removeProvider("BC");
		Timer.logAllOrderedByName(false);
		Timer.logAllOrderedByTotalTime(true);

		for (final String hmacAlgorithm : perfTestMmacAlgorithms) {
			final float totalTimeCustomSunJCE  = Timer.getTotalTime(               hmacAlgorithm + "/SunJCE");
			final float totalTimeBuiltInSunJCE = Timer.getTotalTime("PBKDF2With" + hmacAlgorithm + "/SunJCE");
			System.out.println("Custom PBKDF2 with " + hmacAlgorithm + "/SunJCE is " + (totalTimeBuiltInSunJCE/totalTimeCustomSunJCE) + "x the speed of built-in PBKDF2With" + hmacAlgorithm + "/SunJCE");
		}
		System.out.println(" ");
		for (final String hmacAlgorithm : perfTestMmacAlgorithms) {
			final float totalTimeCustomSunJCE  = Timer.getTotalTime(               hmacAlgorithm + "/SunJCE");
			final float totalTimeCustomBC = Timer.getTotalTime(               hmacAlgorithm + "/BC");
			System.out.println("Custom PBKDF2 with " + hmacAlgorithm + "/SunJCE is " + (totalTimeCustomBC/totalTimeCustomSunJCE) + "x the speed of custom PBKDF2 with " + hmacAlgorithm + "/BC");
		}
		Timer.reset();
	}

	private static void testPbkdf2Helper(final String provider, final String hash, final String password, final String salt, final int xorIterations, final int dkLen, final byte[] expectedDk) throws Exception {
		final byte[] nullSafePassword = (null==password) ? null : password.getBytes("UTF-8");
		final byte[] nullSafeSalt     = (null==salt)     ? null : salt.getBytes("UTF-8");
		final byte[] actualDk         = Pbkdf2Util.deriveKeyFromPassword(provider, hash, nullSafePassword, nullSafeSalt, xorIterations, dkLen);
		Assert.assertNotNull(actualDk);
		Assert.assertEquals(dkLen, actualDk.length);
		Assert.assertTrue("Expected DK: " + DatatypeConverter.printHexBinary(expectedDk) + ", Actual: " + DatatypeConverter.printHexBinary(actualDk), MessageDigest.isEqual(expectedDk, actualDk));	// Constant time byte array compare prevents length time attack
	}

	/**
     * https://tools.ietf.org/html/rfc6070
     * 
     *      Input:
     *        P = "password" (8 octets)
     *        S = "salt" (4 octets)
     *        c = 1
     *        dkLen = 20
     * 
     *      Output:
     *        DK = 0c 60 c8 0f 96 1f 0e 71
     *             f3 a9 b5 24 af 60 12 06
     *             2f e0 37 a6             (20 octets)
     */
	@Test
	public void testPbkdf2TestCase1() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = 20;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("0c 60 c8 0f 96 1f 0e 71 f3 a9 b5 24 af 60 12 06 2f e0 37 a6".replace(" ", ""));
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	/**
     * https://tools.ietf.org/html/rfc6070
     * 
     *      Input:
     *        P = "password" (8 octets)
     *        S = "salt" (4 octets)
     *        c = 2
     *        dkLen = 20
     * 
     *      Output:
     *        DK = ea 6c 01 4d c7 2d 6f 8c
     *             cd 1e d9 2a ce 1d 41 f0
     *             d8 de 89 57             (20 octets)
     */
	@Test
	public void testPbkdf2TestCase2() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 2;
		final int    dkLen      = 20;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("ea 6c 01 4d c7 2d 6f 8c cd 1e d9 2a ce 1d 41 f0 d8 de 89 57".replace(" ", ""));
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	/**
     * https://tools.ietf.org/html/rfc6070
     * 
     *      Input:
     *        P = "password" (8 octets)
     *        S = "salt" (4 octets)
     *        c = 4096
     *        dkLen = 20
     * 
     *      Output:
     *        DK = 4b 00 79 01 b7 65 48 9a
     *             be ad 49 d9 26 f7 21 d0
     *             65 a4 29 c1             (20 octets)
     */
	@Test
	public void testPbkdf2TestCase3() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 4096;
		final int    dkLen      = 20;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("4b 00 79 01 b7 65 48 9a be ad 49 d9 26 f7 21 d0 65 a4 29 c1".replace(" ", ""));
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	/**
     * https://tools.ietf.org/html/rfc6070
     *      Input:
     *        P = "password" (8 octets)
     *        S = "salt" (4 octets)
     *        c = 16777216
     *        dkLen = 20
     * 
     *      Output:
     *        DK = ee fe 3d 61 cd 4d a4 e4
     *             e9 94 5b 3d 6b a2 15 8c
     *             26 34 e9 84             (20 octets)
     */
	@Test
	@Ignore	// very slow, re-enable for functional testing
	public void testPbkdf2TestCase4() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 16777216;
		final int    dkLen      = 20;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("ee fe 3d 61 cd 4d a4 e4 e9 94 5b 3d 6b a2 15 8c 26 34 e9 84".replace(" ", ""));
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	/**
     * https://tools.ietf.org/html/rfc6070
     * 
     *      Input:
     *        P = "passwordPASSWORDpassword" (24 octets)
     *        S = "saltSALTsaltSALTsaltSALTsaltSALTsalt" (36 octets)
     *        c = 4096
     *        dkLen = 25
     * 
     *      Output:
     *        DK = 3d 2e ec 4f e4 1c 84 9b
     *             80 c8 d8 36 62 c0 e4 4a
     *             8b 29 1a 96 4c f2 f0 70
     *             38                      (25 octets)
     */
	@Test
	public void testPbkdf2TestCase5() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "passwordPASSWORDpassword";
		final String S          = "saltSALTsaltSALTsaltSALTsaltSALTsalt";
		final int    c          = 4096;
		final int    dkLen      = 25;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("3d 2e ec 4f e4 1c 84 9b 80 c8 d8 36 62 c0 e4 4a 8b 29 1a 96 4c f2 f0 70 38".replace(" ", ""));
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	/**
     * https://tools.ietf.org/html/rfc6070
     *      Input:
       P = "pass\0word" (9 octets)
       S = "sa\0lt" (5 octets)
       c = 4096
       dkLen = 16

     Output:
       DK = 56 fa 6a a7 55 48 09 9d
            cc 37 d7 f0 34 25 e0 c3 (16 octets)
     */
	@Test
	public void testPbkdf2TestCase6() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "pass\0word";
		final String S          = "sa\0lt";
		final int    c          = 4096;
		final int    dkLen      = 16;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("56 fa 6a a7 55 48 09 9d cc 37 d7 f0 34 25 e0 c3".replace(" ", ""));
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test
	public void testPrivateConstructor() throws Exception {
		final Constructor<?> constructor = Pbkdf2Util.class.getDeclaredConstructor();	// throws exception if zero-parameter constructor is not found
		if (!Modifier.isPrivate(constructor.getModifiers())) {
			throw new IllegalArgumentException("Constructor must be private with no parameters.");
		}
		constructor.setAccessible(true);
		constructor.newInstance();	// ASSUMPTION: Never returns null, but could throw exception. We need to execute it to rule out an exception and for code coverage reporting.
	}

	@Test(expected=NullPointerException.class)
	public void testPbkdf2NullAlgorithm() throws Exception {
		final String hash       = null;
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=NoSuchAlgorithmException.class)
	public void testPbkdf2EmptyAlgorithm() throws Exception {
		final String hash       = "";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2NullPassword() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = null;
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2EmptyPassword() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2NullSalt() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = null;
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2EmptySalt() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "";
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2NegativeCount() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = -1;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2ZeroCount() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 0;
		final int    dkLen      = 16;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test
	public void testPbkdf2MinSaltLengthAndMinCount() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = 16;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary("0C60C80F961F0E71F3A9B524AF601206");
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Ignore
	@Test
	public void testPbkdf2MaxCountPlusOne() throws Exception {	// NOSONAR Fix or remove this skipped unit test
		// No max count specified in RFC
	}

	@Ignore
	@Test
	public void testPbkdf2LargeCount() throws Exception {	// NOSONAR Fix or remove this skipped unit test
		// No need to repeat since RFC 6070 test vector includes a 16M count example
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2NegativeLength() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = -1;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2ZeroLength() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = -1;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test
	public void testPbkdf2MaxLength() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = Pbkdf2Util.MAX_PBKDF2_DKLEN;
		final byte[] expectedDK = DatatypeConverter.parseHexBinary
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test(expected=IllegalArgumentException.class)
	public void testPbkdf2MaxLengthPlusOne() throws Exception {
		final String hash       = "HmacSHA1";
		final String P          = "password";
		final String S          = "salt";
		final int    c          = 1;
		final int    dkLen      = Pbkdf2Util.MAX_PBKDF2_DKLEN + 1;
		final byte[] expectedDK = null;
		TestPbkdf2Util.testPbkdf2Helper(this.provider, hash, P, S, c, dkLen, expectedDK);
	}

	@Test
	public void testPbkdf2Performance() throws Exception {
		final String P          = "passwordPASSWORDpassword";
		final String S          = "saltSALTsaltSALTsaltSALTsaltSALTsalt";
		final int    c          = 32;
		final int    dkBlocks   = 8;

		for (final String hmacAlgorithm : perfTestMmacAlgorithms) {
			final int dkLen = dkBlocks * Mac.getInstance(hmacAlgorithm).getMacLength();	// SHA1: 20 bytes, SHA256: 32 bytes, SHA512: 64 bytes, 
			this.helpTestPbkdf2PerformanceDeriveKeyFromPasswordCustom			("SunJCE",                 hmacAlgorithm, P.getBytes("UTF-8"), S.getBytes("UTF-8"), c, dkLen);	// faster than Sun PBKDF2With*
			this.helpTestPbkdf2PerformanceDeriveKeyFromPasswordCustom			("BC",                     hmacAlgorithm, P.getBytes("UTF-8"), S.getBytes("UTF-8"), c, dkLen);	// slower than BC  PBKDF2With*
			this.helpTestPbkdf2PerformanceDeriveKeyFromPasswordBuiltInSunJCE	("SunJCE",  "PBKDF2With" + hmacAlgorithm, P,                   S.getBytes("UTF-8"), c, dkLen);	// slowest
			this.helpTestPbkdf2PerformanceDeriveKeyFromPasswordBuiltInSunJCE	("BC",      "PBKDF2With" + hmacAlgorithm, P,                   S.getBytes("UTF-8"), c, dkLen);	// fastest
		}
	}

	private void helpTestPbkdf2PerformanceDeriveKeyFromPasswordCustom(final String provider, final String algorithm, final byte[] Pbytes, final byte[] Sbytes, final int c, final int dkLen) throws Exception {
		for (int i=0; i<this.warmups; i++) {
			Pbkdf2Util.deriveKeyFromPassword(provider, algorithm, Pbytes, Sbytes, c, dkLen);
		}
		try (Timer x = new Timer(algorithm + "/" + provider)) {	// BC or SunJCE
			for (int i=0; i<this.samples; i++) {
				Pbkdf2Util.deriveKeyFromPassword(provider, algorithm, Pbytes, Sbytes, c, dkLen);
			}
		}
	}

	private void helpTestPbkdf2PerformanceDeriveKeyFromPasswordBuiltInSunJCE(final String provider, final String algorithm, final String P, final byte[] Sbytes, final int c, final int dkLen) throws Exception {
		for (int i=0; i<this.warmups; i++) {
			Pbkdf2Util.deriveKeyFromPasswordBuiltIn(provider, algorithm, P.toCharArray(), Sbytes, c, dkLen * 8);
		}
		try (Timer x = new Timer(algorithm + "/" + provider)) {	// BC or SunJCE
			for (int i=0; i<this.samples; i++) {
				Pbkdf2Util.deriveKeyFromPasswordBuiltIn(provider, algorithm, P.toCharArray(), Sbytes, c, dkLen * 8);
			}
		}
	}
}